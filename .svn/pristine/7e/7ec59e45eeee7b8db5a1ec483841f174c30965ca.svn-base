import * as types from '../actions/todo';
import { CREATE_ITEM_MODAL } from '../actions/modal';
import { CREATE_ITEM_DATE } from '../actions/week';

/**
 * todo 컴포넌트 Reducer
 */

let todoId = 1
const initialState = {

    /**
     * todos 객체 프로퍼티 값
     * 
     * - id: 할 일 id,
     * - text: 할 일 내용
     * - checked: 할 일 체크 여부
     * - subText: 서브 할 일 내용
     * - groupId: 할 일 그룹
     * - date: 할 일 날짜
     * - memo: 할 일 메모
     */
    todos: [
            {   id: 0, text: '할 일 1', checked: false, 
                subText: [{id: 0, text:'', checked: false}], 
                groupId: 0,
                date: '2019-04-17', memo: ''
            }
    ],
    groupTodos: []
};

const todoReducer = (state = initialState, action) => {
    const {todos, groupTodos} = state;

    switch(action.type){
        // 할 일 추가
        case types.ADD_TODO_ITEM :
            state = {
                todos : state.todos.concat({
                    id: todoId++,
                    text: action.todo,
                    checked: false,
                    subText: [],
                    groupId: 0,
                    date: '',
                    memo: ''
                })
            }
            return {
                ...state,
                groupTodos: [...state.todos]
            };
        // 할 일 목록 토글 기능
        case types.HANDLE_TOGGLE :
            const index = todos.findIndex(todoItem => todoItem.id === action.todoId);
            const selected = todos[index];   //선택한 할 일 객체

            const nextTodoList = [...todos]; // todoList 배열 복사
            nextTodoList[index] = {
                ...selected,
                checked: !selected.checked
            };

            state = {
                todos : nextTodoList
            }

            return {
                ...state,
                groupTodos: nextTodoList
            };
        // 할 일 삭제
        case types.REMOVE_TODO_ITEM :
            state = {
                todos: todos.filter(todo => todo.id !== action.todoId)
            }
            return {
                ...state,
                groupTodos: [...state.todos]
            }
        // 할 일 조회 (그룹 별 조회)
        case types.SHOW_TODO_LIST :
            const copyTodos = [...todos];
            return {
                ...state,
                groupTodos: copyTodos.filter(todo => todo.groupId == action.groupId)
            }

        // Create Item (Modal)
        case CREATE_ITEM_MODAL: 
            return {
                todos: todos.concat({
                    ...action.item,
                    id: todoId++,
                    checked: false,
                })
            }
        case CREATE_ITEM_DATE:
            return {
                todos: todos.concat({
                    ...action.item,
                    id: todoId++,
                    checked: false,
                })
            }
        default:
            return state;
    }
}

export default todoReducer;